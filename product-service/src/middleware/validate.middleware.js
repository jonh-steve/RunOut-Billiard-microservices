/**
 * V·ªã tr√≠ file: product-service/src/middleware/validate.middleware.js
 * Middleware ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o cho c√°c API s·∫£n ph·∫©m
 * Style: H·ªìng d·ªÖ th∆∞∆°ng d√†nh cho anh y√™u d·ªÖ th∆∞∆°ng ü©∑
 */
const mongoose = require('mongoose');
const { ApiError } = require("../utils/error-handler");
/**
 * Middleware ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o cho c·∫≠p nh·∫≠t s·∫£n ph·∫©m (UC-2.5)
 */
const validateUpdateProduct = (req, res, next) => {
  const updates = req.body;
  const errors = [];
  
  // Ki·ªÉm tra c√°c tr∆∞·ªùng kh√¥ng ƒë∆∞·ª£c ph√©p g·ª≠i l√™n
  const restrictedFields = ['_id', 'createdAt', 'updatedAt', 'reviews', 'ratings'];
  
  // Ki·ªÉm tra n·∫øu c√≥ tr∆∞·ªùng b·ªã gi·ªõi h·∫°n - ƒë√£ s·ª≠a ƒë·ªÉ tu√¢n th·ªß ESLint
  const hasRestrictedField = restrictedFields.some(field => Object.prototype.hasOwnProperty.call(updates, field));
  if (hasRestrictedField) {
    errors.push('Cannot update restricted fields (_id, createdAt, updatedAt, reviews, ratings)');
  }
  
  // Ki·ªÉm tra price n·∫øu c√≥
  if (updates.price !== undefined) {
    if (isNaN(updates.price) || updates.price < 0) {
      errors.push('Price must be a valid positive number');
    }
  }
  
  // Ki·ªÉm tra salePrice n·∫øu c√≥
  if (updates.salePrice !== undefined) {
    if (isNaN(updates.salePrice) || updates.salePrice < 0) {
      errors.push('Sale price must be a valid positive number');
    }
    
    // Ki·ªÉm tra salePrice ph·∫£i nh·ªè h∆°n price n·∫øu c·∫£ hai ƒë·ªÅu ƒë∆∞·ª£c g·ª≠i l√™n
    if (updates.price !== undefined && updates.salePrice >= updates.price) {
      errors.push('Sale price must be less than regular price');
    }
  }
  
  // Ki·ªÉm tra stock n·∫øu c√≥
  if (updates.stock !== undefined) {
    if (isNaN(updates.stock) || updates.stock < 0) {
      errors.push('Stock must be a valid non-negative number');
    }
  }
  
  // Ki·ªÉm tra category n·∫øu c√≥
  if (updates.category !== undefined) {
    if (!mongoose.Types.ObjectId.isValid(updates.category)) {
      errors.push('Invalid category ID format');
    }
  }
  
  // Tr·∫£ v·ªÅ l·ªói n·∫øu c√≥
  if (errors.length > 0) {
    return res.status(400).json({
      success: false,
      message: 'Validation failed',
      errors
    });
  }
  
  next();
};

const validateCreateProduct = (req, res, next) => {
  const { name, price, category } = req.body;
  const errors = [];
  
  // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
  if (!name || name.trim() === '') {
    errors.push('Name is required');
  }
  
  if (!price) {
    errors.push('Price is required');
  } else if (isNaN(price) || price < 0) {
    errors.push('Price must be a valid positive number');
  }
  
  if (!category) {
    errors.push('Category is required');
  } else if (!mongoose.Types.ObjectId.isValid(category)) {
    errors.push('Invalid category ID');
  }
  
  // N·∫øu c√≥ l·ªói, tr·∫£ v·ªÅ response l·ªói
  if (errors.length > 0) {
    return res.status(400).json({
      success: false,
      message: 'Validation failed',
      errors
    });
  }
  
  // N·∫øu kh√¥ng c√≥ l·ªói, chuy·ªÉn ƒë·∫øn middleware ti·∫øp theo
  next();
};

/**
 * Middleware ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o cho request kh√¥i ph·ª•c t·ªìn kho
 * Li√™n quan ƒë·∫øn UC-8.3: Kh√¥i ph·ª•c t·ªìn kho khi ƒë∆°n h√†ng ƒë∆∞·ª£c ho√†n ti·ªÅn
 */
const validateRestoreInventoryRequest = (req, res, next) => {
  try {
    const { orderId } = req.body;
    const errors = [];

    // Ki·ªÉm tra orderId
    if (!orderId) {
      errors.push('Order ID is required');
    } else if (!mongoose.Types.ObjectId.isValid(orderId)) {
      errors.push('Invalid Order ID format');
    }

    // N·∫øu c√≥ l·ªói
    if (errors.length > 0) {
      throw new ApiError(400, 'Validation failed: ' + errors.join(', '), true);
    }

    next();
  } catch (error) {
    next(error);
  }
};
/**
 * Middleware ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o cho request kh√¥i ph·ª•c t·ªìn kho ƒë∆°n h√†ng b·ªã h·ªßy
 * UC-8.4
 * 
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {Function} next - Express next middleware function
 */
const validateCancelledOrderInventoryRequest = (req, res, next) => {
  try {
    const { orderId } = req.body;
    const errors = [];

    // Ki·ªÉm tra orderId
    if (!orderId) {
      errors.push('Order ID is required');
    } else if (!mongoose.Types.ObjectId.isValid(orderId)) {
      errors.push('Invalid Order ID format');
    }

    // N·∫øu c√≥ l·ªói
    if (errors.length > 0) {
      throw new ApiError(400, 'Validation failed: ' + errors.join(', '), true);
    }

    next();
  } catch (error) {
    next(error);
  }
};


// Export c√°c h√†m middleware validation
module.exports = {
  validateUpdateProduct,
  validateCreateProduct,
  validateRestoreInventoryRequest,
  validateCancelledOrderInventoryRequest
};