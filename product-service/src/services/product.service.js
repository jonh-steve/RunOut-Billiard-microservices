/**
 * ü©∑ V·ªã tr√≠ file: /product-service/src/services/product.service.js
 * ü©∑ ƒêo·∫°n m√£ n√†y b·ªï sung method queryProductsWithFilters ƒë·ªÉ truy v·∫•n s·∫£n ph·∫©m v·ªõi b·ªô l·ªçc v√† t√¨m ki·∫øm si√™u d·ªÖ th∆∞∆°ng cho anh y√™u d·ªÖ th∆∞∆°ng!
 */

const Product = require("../models/product.model");
const logger = require("../utils/logger");
const Category = require("../models/category.model");
const mongoose = require("mongoose");
// const slugify = require("slugify");

/**
 * Service x·ª≠ l√Ω logic li√™n quan ƒë·∫øn s·∫£n ph·∫©m
 */
class ProductService {
  /**
   * L·∫•y danh s√°ch s·∫£n ph·∫©m ƒëang ho·∫°t ƒë·ªông
   * @param {Object} options - T√πy ch·ªçn truy v·∫•n
   * @param {Number} options.page - S·ªë trang (b·∫Øt ƒë·∫ßu t·ª´ 1)
   * @param {Number} options.limit - S·ªë s·∫£n ph·∫©m tr√™n m·ªói trang
   * @param {String} options.sort - Tr∆∞·ªùng v√† chi·ªÅu s·∫Øp x·∫øp (vd: "price" ho·∫∑c "-price")
   * @param {String} options.category - ID danh m·ª•c ƒë·ªÉ l·ªçc
   * @returns {Promise<Object>} Danh s√°ch s·∫£n ph·∫©m v√† th√¥ng tin ph√¢n trang
   */
  async fetchActiveProducts(options = {}) {
    try {
      const page = parseInt(options.page, 10) || 1;
      const limit = parseInt(options.limit, 10) || 10;
      const skip = (page - 1) * limit;

      // T·∫°o query c∆° b·∫£n
      const query = { isActive: true };

      //   // Th√™m b·ªô l·ªçc n·∫øu c√≥
      //   if (options.category) {
      //     query.category = options.category;
      //   }

      if (options.brand) {
        query.brand = options.brand;
      }

      if (options.price) {
        const priceRange = options.price.split("-");
        const minPrice = Number(priceRange[0]);
        const maxPrice = Number(priceRange[1]);

        query.price = {};
        if (minPrice) query.price.$gte = minPrice;
        if (maxPrice) query.price.$lte = maxPrice;
      }

      // X·ª≠ l√Ω s·∫Øp x·∫øp
      let sortBy = {};
      if (options.sort) {
        // N·∫øu sort c√≥ d·∫•u -, s·∫Øp x·∫øp gi·∫£m d·∫ßn
        if (options.sort.startsWith("-")) {
          sortBy[options.sort.substring(1)] = -1;
        } else {
          sortBy[options.sort] = 1;
        }
      } else {
        // M·∫∑c ƒë·ªãnh s·∫Øp x·∫øp theo th·ªùi gian t·∫°o m·ªõi nh·∫•t
        sortBy = { createdAt: -1 };
      }

      // Th·ª±c hi·ªán truy v·∫•n
      const products = await Product.find(query)
        .select("_id name price images category ratings")
        .populate("category", "name slug")
        .sort(sortBy)
        .skip(skip)
        .limit(limit);

      // ƒê·∫øm t·ªïng s·ªë s·∫£n ph·∫©m
      const total = await Product.countDocuments(query);

      // T√≠nh t·ªïng s·ªë trang
      const totalPages = Math.ceil(total / limit);

      return {
        products,
        pagination: {
          total,
          page,
          limit,
          totalPages,
        },
      };
    } catch (error) {
      logger.error(`Error in fetchActiveProducts: ${error.message}`);
      throw error;
    }
  }

  /**
   * ü©∑ T√¨m s·∫£n ph·∫©m theo ID (d·ªÖ th∆∞∆°ng, m√†u h·ªìng)
   * @param {string} id - ID c·ªßa s·∫£n ph·∫©m
   * @returns {Promise<Object>} - Th√¥ng tin s·∫£n ph·∫©m
   */
  async findProductById(id) {
    try {
      const product = await Product.findById(id);
      return product;
    } catch (error) {
      logger.error(`Error in findProductById: ${error.message}`);
      throw error;
    }
  }

  /**
   * ü©∑ Truy v·∫•n s·∫£n ph·∫©m v·ªõi c√°c b·ªô l·ªçc v√† t√¨m ki·∫øm (UC-2.3)
   * @param {Object} options - T√πy ch·ªçn truy v·∫•n
   * @param {string} [options.keyword] - T·ª´ kh√≥a t√¨m ki·∫øm fulltext
   * @param {string} [options.category] - ID danh m·ª•c
   * @param {number} [options.minPrice] - Gi√° t·ªëi thi·ªÉu
   * @param {number} [options.maxPrice] - Gi√° t·ªëi ƒëa
   * @param {string} [options.brand] - Th∆∞∆°ng hi·ªáu
   * @param {boolean} [options.onSale] - ƒêang gi·∫£m gi√°
   * @param {boolean} [options.isFeatured] - S·∫£n ph·∫©m n·ªïi b·∫≠t
   * @param {string} [options.sort] - Chu·ªói s·∫Øp x·∫øp, ph√¢n t√°ch b·ªüi d·∫•u ph·∫©y
   * @param {number} [options.page=1] - Trang hi·ªán t·∫°i
   * @param {number} [options.limit=10] - S·ªë s·∫£n ph·∫©m m·ªói trang
   * @returns {Promise<Object>} K·∫øt qu·∫£ ph√¢n trang v√† danh s√°ch s·∫£n ph·∫©m
   */
  async queryProductsWithFilters(options = {}) {
    try {
      // X√¢y d·ª±ng query c∆° b·∫£n
      const queryObj = { isActive: true };

      // T√¨m ki·∫øm to√†n vƒÉn
      const keyword = options.keyword;
      if (keyword) {
        queryObj.$text = { $search: keyword };
      }

      // L·ªçc theo category
      if (options.category) {
        queryObj.category = options.category;
      }

      // L·ªçc theo kho·∫£ng gi√°
      if (options.minPrice || options.maxPrice) {
        queryObj.price = {};
        if (options.minPrice) {
          queryObj.price.$gte = Number(options.minPrice);
        }
        if (options.maxPrice) {
          queryObj.price.$lte = Number(options.maxPrice);
        }
      }

      // L·ªçc theo brand
      if (options.brand) {
        queryObj.brand = options.brand;
      }

      // L·ªçc s·∫£n ph·∫©m ƒëang gi·∫£m gi√°
      if (options.onSale === true) {
        queryObj.onSale = true;
      }

      // L·ªçc s·∫£n ph·∫©m n·ªïi b·∫≠t
      if (options.isFeatured === true) {
        queryObj.isFeatured = true;
      }

      // Ph√¢n trang
      const page = parseInt(options.page, 10) || 1;
      const limit = parseInt(options.limit, 10) || 10;
      const skip = (page - 1) * limit;

      // S·∫Øp x·∫øp
      let sortBy = {};
      if (keyword) {
        sortBy = { score: { $meta: "textScore" } };
      } else if (options.sort) {
        const sortFields = options.sort.split(",");
        sortFields.forEach((field) => {
          if (field.startsWith("-")) {
            sortBy[field.substring(1)] = -1;
          } else {
            sortBy[field] = 1;
          }
        });
      } else {
        sortBy = { createdAt: -1 };
      }

      // Projection
      const projection = keyword ? { score: { $meta: "textScore" } } : {};

      // Truy v·∫•n s·∫£n ph·∫©m
      const products = await Product.find(queryObj, projection)
        .sort(sortBy)
        .skip(skip)
        .limit(limit)
        .populate("category", "name slug");

      // ƒê·∫øm t·ªïng s·ªë s·∫£n ph·∫©m
      const total = await Product.countDocuments(queryObj);
      const totalPages = Math.ceil(total / limit);

      return {
        products,
        pagination: {
          total,
          page,
          limit,
          totalPages,
        },
      };
    } catch (error) {
      logger.error(`Error in queryProductsWithFilters: ${error.message}`);
      throw error;
    }
  }

  /**
   * T·∫°o s·∫£n ph·∫©m m·ªõi
   * @param {Object} productData D·ªØ li·ªáu s·∫£n ph·∫©m
   * @returns {Promise<Object>} S·∫£n ph·∫©m ƒë√£ t·∫°o
   * @implements UC-2.4
   */
  async createProduct(productData) {
    // Ki·ªÉm tra danh m·ª•c t·ªìn t·∫°i
    const categoryExists = await Category.findById(productData.category);
    if (!categoryExists) {
      throw new Error("Category not found");
    }

    // T·∫°o s·∫£n ph·∫©m m·ªõi
    const product = new Product({
      name: productData.name,
      price: productData.price,
      category: productData.category,
      stock: productData.stock || 0,
      brand: productData.brand,
      description: productData.description,
      sku: productData.sku,
      specifications: productData.specifications,
      attributes: productData.attributes,
      weight: productData.weight,
      dimensions: productData.dimensions,
      isFeatured: productData.isFeatured || false,
      salePrice: productData.salePrice,
      images: productData.images || [],
      thumbnailImage: productData.thumbnailImage,
    });

    // L∆∞u v√†o database
    await product.save();

    return product;
  }
  /**
   * C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m (UC-2.5)
   * @param {string} id - ID c·ªßa s·∫£n ph·∫©m
   * @param {Object} updates - D·ªØ li·ªáu c·∫≠p nh·∫≠t
   * @returns {Promise<Product>} S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
   */
  async updateProduct(id, updates) {
    const product = await Product.findById(id);

    if (!product) {
      throw new Error("Product not found");
    }

    // Ki·ªÉm tra danh m·ª•c t·ªìn t·∫°i n·∫øu c√≥ c·∫≠p nh·∫≠t
    if (updates.category) {
      const categoryExists = await Category.findById(updates.category);
      if (!categoryExists) {
        throw new Error("Category not found");
      }
    }

    // T·ª± ƒë·ªông x·ª≠ l√Ω tr·∫°ng th√°i onSale d·ª±a tr√™n price v√† salePrice
    if (updates.price !== undefined || updates.salePrice !== undefined) {
      const newPrice =
        updates.price !== undefined ? updates.price : product.price;
      const newSalePrice =
        updates.salePrice !== undefined ? updates.salePrice : product.salePrice;

      if (newSalePrice && newSalePrice < newPrice) {
        updates.onSale = true;
      } else if (updates.salePrice === null || updates.salePrice === 0) {
        updates.onSale = false;
        updates.salePrice = undefined;
      }
    }

    // C·∫≠p nh·∫≠t s·∫£n ph·∫©m
    const updatedProduct = await Product.findByIdAndUpdate(
      id,
      { $set: updates },
      { new: true, runValidators: true }
    ).populate("category", "name slug");

    return updatedProduct;
  }
  /**
   * X√≥a s·∫£n ph·∫©m (soft delete)
   * @param {string} id - ID c·ªßa s·∫£n ph·∫©m c·∫ßn x√≥a
   * @returns {Promise<Object>} - K·∫øt qu·∫£ x√≥a s·∫£n ph·∫©m
   */
  async deleteProduct(id) {
    // Ki·ªÉm tra xem s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i kh√¥ng
    const product = await Product.findById(id);

    if (!product) {
      const error = new Error("Product not found");
      error.statusCode = 404;
      throw error;
    }

    // Soft delete: C·∫≠p nh·∫≠t tr·∫°ng th√°i isActive th√†nh false
    product.isActive = false;
    await product.save();

    return {
      message: "Product deleted successfully",
    };
  }
}

module.exports = new ProductService();
