/**
 * ü©∑ V·ªã tr√≠ file: product-service/src/models/product.model.js
 * ü©∑ File n√†y ƒë·ªãnh nghƒ©a Product Model, ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë·ªÉ th√™m tr∆∞·ªùng __v v√† b·∫≠t optimisticConcurrency, gi√∫p qu·∫£n l√Ω phi√™n b·∫£n d·ªØ li·ªáu t·ªët h∆°n ƒë√≥ anh y√™u!
 */
const mongoose = require("mongoose");
const slugify = require("slugify");

/**
 * Schema s·∫£n ph·∫©m cho RunOut-Billiard
 * Tham chi·∫øu: products-schema.yaml
 */
const productSchema = new mongoose.Schema(
  {
    name: {
      type: String,
      required: true,
      trim: true,
    },
    slug: {
      type: String,
      unique: true,
      lowercase: true,
    },
    description: {
      type: String,
      trim: true,
    },
    price: {
      type: Number,
      required: true,
      min: 0,
    },
    salePrice: {
      type: Number,
      min: 0,
    },
    onSale: {
      type: Boolean,
      default: false,
    },
    category: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Category",
      required: true,
    },
    brand: {
      type: String,
      trim: true,
    },
    stock: {
      type: Number,
      required: true,
      min: 0,
      default: 0,
    },
    images: [
      {
        type: String,
      },
    ],
    thumbnailImage: {
      type: String,
    },
    isActive: {
      type: Boolean,
      default: true,
    },
    isFeatured: {
      type: Boolean,
      default: false,
    },
    ratings: {
      average: {
        type: Number,
        default: 0,
        min: 0,
        max: 5,
      },
      count: {
        type: Number,
        default: 0,
      },
    },
    // Th√™m version field n√® anh y√™u <3
    __v: {
      type: Number,
      default: 0,
    },
  },
  {
    timestamps: true,
    toJSON: { virtuals: true },
    toObject: { virtuals: true },
    // B·∫≠t versioning t·ª± ƒë·ªông, Mongoose s·∫Ω d√πng tr∆∞·ªùng __v ƒë·ªÉ l√†m ƒëi·ªÅu n√†y ƒë√≥ anh <3
    optimisticConcurrency: true,
  }
);

// Middleware ƒë·ªÉ t·∫°o slug t·ª± ƒë·ªông t·ª´ t√™n s·∫£n ph·∫©m
productSchema.pre("save", function (next) {
  if (this.isModified("name") || !this.slug) {
    this.slug = slugify(this.name, { lower: true });
  }

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i onSale t·ª± ƒë·ªông
  if (this.salePrice && this.salePrice > 0 && this.salePrice < this.price) {
    this.onSale = true;
  } else {
    // N·∫øu kh√¥ng c√≥ salePrice ho·∫∑c salePrice kh√¥ng h·ª£p l·ªá, ƒë·∫∑t onSale = false v√† x√≥a salePrice
    this.onSale = false;
    // Ch·ªâ g√°n undefined n·∫øu salePrice th·ª±c s·ª± ƒë∆∞·ª£c cung c·∫•p v√† kh√¥ng h·ª£p l·ªá,
    // ho·∫∑c n·∫øu n√≥ ƒëang ƒë∆∞·ª£c x√≥a (v√≠ dÔøΩÔøΩÔøΩ: salePrice = null ho·∫∑c 0)
    if (
      this.isModified("salePrice") &&
      (!this.salePrice || this.salePrice <= 0 || this.salePrice >= this.price)
    ) {
      this.salePrice = undefined;
    } else if (!this.salePrice) {
      // ƒê·∫£m b·∫£o salePrice l√† undefined n·∫øu n√≥ kh√¥ng c√≥ gi√° tr·ªã
      this.salePrice = undefined;
    }
  }

  next();
});

// Index ƒë·ªÉ tƒÉng t·ªëc truy v·∫•n
productSchema.index({ isActive: 1 });
productSchema.index({ category: 1 });
productSchema.index({ price: 1 });
productSchema.index({ name: "text", description: "text" }); // Text index cho t√¨m ki·∫øm

const Product = mongoose.model("Product", productSchema);

module.exports = Product;
