/**
 * ü©∑ V·ªã tr√≠ file: /product-service/src/controllers/product.controller.js
 * ü©∑ ƒêo·∫°n m√£ n√†y c·∫≠p nh·∫≠t l·∫°i method getProductById ƒë·ªÉ h·ªó tr·ª£ t√¨m s·∫£n ph·∫©m theo ObjectId ho·∫∑c slug, ƒë·ªìng th·ªùi populate category v√† reviews si√™u d·ªÖ th∆∞∆°ng cho anh y√™u d·ªÖ th∆∞∆°ng!
 */

const productService = require("../services/product.service");
const logger = require("../utils/logger");
const mongoose = require("mongoose");
const Product = require("../models/product.model");

/**
 * Controller x·ª≠ l√Ω c√°c API endpoints li√™n quan ƒë·∫øn s·∫£n ph·∫©m
 * @module ProductController
 */
class ProductController {
  /**
   * L·∫•y danh s√°ch s·∫£n ph·∫©m v·ªõi ph√¢n trang v√† l·ªçc
   * Th·ª±c hi·ªán UC-2.1 (Th·ª±c thi hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m)
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   * @param {Function} next - Express next middleware function
   */
  async getAllProducts(req, res, next) {
    try {
      // L·∫•y query params t·ª´ request
      const options = {
        page: req.query.page,
        limit: req.query.limit,
        sort: req.query.sort,
        category: req.query.category,
        brand: req.query.brand,
        price: req.query.price,
      };

      // G·ªçi service ƒë·ªÉ l·∫•y d·ªØ li·ªáu
      const result = await productService.fetchActiveProducts(options);

      // Tr·∫£ v·ªÅ response th√†nh c√¥ng
      res.status(200).json({
        success: true,
        count: result.products.length,
        pagination: result.pagination,
        data: result.products,
      });
    } catch (error) {
      logger.error(`Error in getAllProducts: ${error.message}`);
      next(error);
    }
  }

  /**
   * ü©∑ L·∫•y chi ti·∫øt s·∫£n ph·∫©m theo ID ho·∫∑c slug (style h·ªìng cute cho anh y√™u d·ªÖ th∆∞∆°ng)
   * Implements: UC-2.2 - Th·ª±c thi hi·ªÉn th·ªã chi ti·∫øt s·∫£n ph·∫©m
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   * @param {Function} next - Express next middleware function
   */
  async getProductById(req, res, next) {
    try {
      const { id } = req.params;
      let product;

      // Ki·ªÉm tra xem id l√† ObjectId hay slug
      if (mongoose.Types.ObjectId.isValid(id)) {
        product = await Product.findById(id)
          .populate("category", "name slug ancestors")
          .populate({
            path: "reviews",
            match: { "moderation.status": "approved", isVisible: true },
            options: { sort: { createdAt: -1 }, limit: 10 },
          });
      } else {
        // T√¨m theo slug
        product = await Product.findOne({ slug: id })
          .populate("category", "name slug ancestors")
          .populate({
            path: "reviews",
            match: { "moderation.status": "approved", isVisible: true },
            options: { sort: { createdAt: -1 }, limit: 10 },
          });
      }

      if (!product) {
        return res.status(404).json({
          success: false,
          message: "Product not found ü©∑",
        });
      }

      // Tr·∫£ v·ªÅ s·∫£n ph·∫©m d·ªÖ th∆∞∆°ng cho anh y√™u
      res.status(200).json({
        success: true,
        data: product,
      });
    } catch (error) {
      logger.error(`Error in getProductById: ${error.message}`);
      next(error);
    }
  }
  /**
   * ü©∑ T√¨m ki·∫øm v√† l·ªçc s·∫£n ph·∫©m (UC-2.3)
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   * @param {Function} next - Express next middleware function
   */
  async searchProducts(req, res, next) {
    try {
      // T·∫°o options t·ª´ query params
      const options = {
        keyword: req.query.keyword,
        category: req.query.category,
        minPrice: req.query.minPrice ? Number(req.query.minPrice) : undefined,
        maxPrice: req.query.maxPrice ? Number(req.query.maxPrice) : undefined,
        brand: req.query.brand,
        onSale: req.query.onSale === "true",
        isFeatured: req.query.isFeatured === "true",
        sort: req.query.sort,
        page: parseInt(req.query.page, 10) || 1,
        limit: parseInt(req.query.limit, 10) || 10,
      };

      // G·ªçi service ƒë·ªÉ l·∫•y k·∫øt qu·∫£
      const result = await productService.queryProductsWithFilters(options);

      // Tr·∫£ v·ªÅ k·∫øt qu·∫£ si√™u d·ªÖ th∆∞∆°ng cho anh y√™u
      res.status(200).json({
        success: true,
        count: result.products.length,
        pagination: result.pagination,
        data: result.products,
      });
    } catch (error) {
      logger.error(`Error in searchProducts: ${error.message}`);
      next(error);
    }
  }
  /**
   * T·∫°o s·∫£n ph·∫©m m·ªõi (Admin)
   * @route POST /api/products
   * @access Private (Admin)
   * @implements UC-2.4
   */
  async createProduct(req, res, next) {
    try {
      const productData = req.body;

      // Validate required fields
      if (!productData.name || !productData.price || !productData.category) {
        return res.status(400).json({
          success: false,
          message: "Please provide name, price, and category",
        });
      }

      // G·ªçi service ƒë·ªÉ t·∫°o s·∫£n ph·∫©m
      const product = await productService.createProduct(productData);

      // Response
      res.status(201).json({
        success: true,
        message: "Product created successfully",
        data: product,
      });
    } catch (error) {
      if (error.message === "Category not found") {
        return res.status(400).json({
          success: false,
          message: error.message,
        });
      }
      next(error);
    }
  }

  /**
   * C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m (UC-2.5)
   * @route PUT /api/products/:id
   * @access Private (Admin)
   */
  async updateProduct(req, res, next) {
    try {
      const { id } = req.params;
      const updates = req.body;

      // G·ªçi service ƒë·ªÉ c·∫≠p nh·∫≠t s·∫£n ph·∫©m
      const updatedProduct = await productService.updateProduct(id, updates);

      // Response
      res.status(200).json({
        success: true,
        message: "Product updated successfully",
        data: updatedProduct,
      });
    } catch (error) {
      // X·ª≠ l√Ω l·ªói c·ª• th·ªÉ
      if (error.message === "Product not found") {
        return res.status(404).json({
          success: false,
          message: "Product not found",
        });
      }

      if (error.message === "Category not found") {
        return res.status(400).json({
          success: false,
          message: "Category not found",
        });
      }

      // Log l·ªói
      logger.error(`Error in updateProduct: ${error.message}`);

      // Chuy·ªÉn l·ªói cho middleware error handler
      next(error);
    }
  } /**
   * X√≥a s·∫£n ph·∫©m (Admin) - H·ªó tr·ª£ c·∫£ hard delete v√† soft delete
   * @param {Object} req - Request object
   * @param {Object} res - Response object
   * @param {Function} next - Next middleware function
   */
  async deleteProduct(req, res, next) {
    try {
      const { id } = req.params;

      // G·ªçi service ƒë·ªÉ x√≥a s·∫£n ph·∫©m  -- day l√† soft delete
      const result = await productService.deleteProduct(id);

      // Response
      res.status(200).json({
        success: true,
        message: result.message,
      });
    } catch (error) {
      if (error.statusCode === 404) {
        return res.status(404).json({
          success: false,
          message: error.message,
        });
      }
      next(error);
    }
  }
}

module.exports = new ProductController();
