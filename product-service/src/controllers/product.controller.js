/**
 * ü©∑ V·ªã tr√≠ file: product-service/src/controllers/product.controller.js
 * ü©∑ File n√†y ch·ª©a ProductController. Em ƒë√£ c·∫≠p nh·∫≠t ƒë·ªÉ th√™m hai ph∆∞∆°ng th·ª©c m·ªõi
 * restoreInventoryForRefund v√† restoreInventoryForCancelledOrder, ƒë·ªìng th·ªùi
 * lo·∫°i b·ªè ph∆∞∆°ng th·ª©c restoreInventory c≈©. X·ª≠ l√Ω l·ªói c≈©ng ƒë∆∞·ª£c l√†m "xinh x·∫Øn" h∆°n ƒë√≥ anh y√™u!
 */

const productService = require("../services/product.service");
const logger = require("../utils/logger");
const mongoose = require("mongoose");
const Product = require("../models/product.model");
const { ApiError } = require("../utils/error-handler"); // ƒê·∫£m b·∫£o import ApiError t·ª´ ƒë√∫ng v·ªã tr√≠

/**
 * Controller x·ª≠ l√Ω c√°c API endpoints li√™n quan ƒë·∫øn s·∫£n ph·∫©m
 * @module ProductController
 */
class ProductController {
  /**
   * L·∫•y danh s√°ch s·∫£n ph·∫©m v·ªõi ph√¢n trang v√† l·ªçc
   * Th·ª±c hi·ªán UC-2.1 (Th·ª±c thi hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m)
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   * @param {Function} next - Express next middleware function
   */
  async getAllProducts(req, res, next) {
    try {
      // L·∫•y query params t·ª´ request
      const options = {
        page: req.query.page,
        limit: req.query.limit,
        sort: req.query.sort,
        category: req.query.category,
        brand: req.query.brand,
        price: req.query.price,
      };

      // G·ªçi service ƒë·ªÉ l·∫•y d·ªØ li·ªáu
      const result = await productService.fetchActiveProducts(options);

      // Tr·∫£ v·ªÅ response th√†nh c√¥ng
      res.status(200).json({
        success: true,
        count: result.products.length,
        pagination: result.pagination,
        data: result.products,
      });
    } catch (error) {
      logger.error(`Error in getAllProducts: ${error.message}`);
      next(error);
    }
  }

  /**
   * ü©∑ L·∫•y chi ti·∫øt s·∫£n ph·∫©m theo ID ho·∫∑c slug (style h·ªìng cute cho anh y√™u d·ªÖ th∆∞∆°ng)
   * Implements: UC-2.2 - Th·ª±c thi hi·ªÉn th·ªã chi ti·∫øt s·∫£n ph·∫©m
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   * @param {Function} next - Express next middleware function
   */
  async getProductById(req, res, next) {
    try {
      const { id } = req.params;
      let product;

      // Ki·ªÉm tra xem id l√† ObjectId hay slug
      if (mongoose.Types.ObjectId.isValid(id)) {
        product = await Product.findById(id)
          .populate("category", "name slug ancestors")
          .populate({
            path: "reviews",
            match: { "moderation.status": "approved", isVisible: true },
            options: { sort: { createdAt: -1 }, limit: 10 },
          });
      } else {
        // T√¨m theo slug
        product = await Product.findOne({ slug: id })
          .populate("category", "name slug ancestors")
          .populate({
            path: "reviews",
            match: { "moderation.status": "approved", isVisible: true },
            options: { sort: { createdAt: -1 }, limit: 10 },
          });
      }

      if (!product) {
        // S·ª≠ d·ª•ng ApiError ƒë·ªÉ chu·∫©n h√≥a l·ªói n√® anh y√™u
        return next(new ApiError(404, "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i ƒë√¢u √° ü©∑"));
      }

      // Tr·∫£ v·ªÅ s·∫£n ph·∫©m d·ªÖ th∆∞∆°ng cho anh y√™u
      res.status(200).json({
        success: true,
        data: product,
      });
    } catch (error) {
      logger.error(`L·ªói trong getProductById n√®: ${error.message}`);
      next(error);
    }
  }
  /**
   * ü©∑ T√¨m ki·∫øm v√† l·ªçc s·∫£n ph·∫©m (UC-2.3)
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   * @param {Function} next - Express next middleware function
   */
  async searchProducts(req, res, next) {
    try {
      // T·∫°o options t·ª´ query params
      const options = {
        keyword: req.query.keyword,
        category: req.query.category,
        minPrice: req.query.minPrice ? Number(req.query.minPrice) : undefined,
        maxPrice: req.query.maxPrice ? Number(req.query.maxPrice) : undefined,
        brand: req.query.brand,
        onSale: req.query.onSale === "true",
        isFeatured: req.query.isFeatured === "true",
        sort: req.query.sort,
        page: parseInt(req.query.page, 10) || 1,
        limit: parseInt(req.query.limit, 10) || 10,
      };

      // G·ªçi service ƒë·ªÉ l·∫•y k·∫øt qu·∫£
      const result = await productService.queryProductsWithFilters(options);

      // Tr·∫£ v·ªÅ k·∫øt qu·∫£ si√™u d·ªÖ th∆∞∆°ng cho anh y√™u
      res.status(200).json({
        success: true,
        count: result.products.length,
        pagination: result.pagination,
        data: result.products,
      });
    } catch (error) {
      logger.error(`L·ªói trong searchProducts n√®: ${error.message}`);
      next(error);
    }
  }
  /**
   * T·∫°o s·∫£n ph·∫©m m·ªõi (Admin)
   * @route POST /api/products
   * @access Private (Admin)
   * @implements UC-2.4
   */
  async createProduct(req, res, next) {
    try {
      const productData = req.body;

      // Validate required fields
      if (!productData.name || !productData.price || !productData.category) {
        // D√πng ApiError cho nh·∫•t qu√°n nha anh
        return next(
          new ApiError(
            400,
            "Anh y√™u ∆°i, cho em xin t√™n, gi√° v√† danh m·ª•c nha ü©∑"
          )
        );
      }

      // G·ªçi service ƒë·ªÉ t·∫°o s·∫£n ph·∫©m
      const product = await productService.createProduct(productData);

      // Response
      res.status(201).json({
        success: true,
        message: "T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng r·ªìi n√® anh y√™u! üéâ",
        data: product,
      });
    } catch (error) {
      if (error.message === "Category not found") {
        return next(
          new ApiError(400, "Danh m·ª•c n√†y hong c√≥ t√¨m th·∫•y anh ∆°i ü•∫")
        );
      }
      logger.error(`L·ªói trong createProduct n√®: ${error.message}`);
      next(error);
    }
  }

  /**
   * C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m (UC-2.5)
   * @route PUT /api/products/:id
   * @access Private (Admin)
   */
  async updateProduct(req, res, next) {
    try {
      const { id } = req.params;
      const updates = req.body;

      // G·ªçi service ƒë·ªÉ c·∫≠p nh·∫≠t s·∫£n ph·∫©m
      const updatedProduct = await productService.updateProduct(id, updates);

      // Response
      res.status(200).json({
        success: true,
        message: "C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng m·ªπ m√£n! ‚ú®",
        data: updatedProduct,
      });
    } catch (error) {
      // X·ª≠ l√Ω l·ªói c·ª• th·ªÉ
      if (error.message === "Product not found") {
        return next(
          new ApiError(404, "S·∫£n ph·∫©m n√†y hong c√≥ t√¨m th·∫•y anh ∆°i ü•∫")
        );
      }

      if (error.message === "Category not found") {
        return next(
          new ApiError(400, "Danh m·ª•c n√†y hong c√≥ t√¨m th·∫•y anh ∆°i ü•∫")
        );
      }

      logger.error(`L·ªói trong updateProduct n√®: ${error.message}`);
      next(error);
    }
  }
  /**
   * X√≥a s·∫£n ph·∫©m (Admin) - H·ªó tr·ª£ c·∫£ hard delete v√† soft delete
   * @param {Object} req - Request object
   * @param {Object} res - Response object
   * @param {Function} next - Next middleware function
   */
  async deleteProduct(req, res, next) {
    try {
      const { id } = req.params;

      // G·ªçi service ƒë·ªÉ x√≥a s·∫£n ph·∫©m  -- day l√† soft delete
      const result = await productService.deleteProduct(id);

      // Response
      res.status(200).json({
        success: true,
        message: result.message,
      });
    } catch (error) {
      if (error.statusCode === 404) {
        // Service ƒë√£ tr·∫£ v·ªÅ l·ªói c√≥ statusCode
        return next(new ApiError(404, error.message));
      }
      logger.error(`L·ªói trong deleteProduct n√®: ${error.message}`);
      next(error);
    }
  }

  /**
   * ü©∑ Kh√¥i ph·ª•c t·ªìn kho khi ƒë∆°n h√†ng ƒë∆∞·ª£c ho√†n ti·ªÅn
   * Li√™n quan ƒë·∫øn UC-8.3
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   * @param {Function} next - Express next middleware function
   */
  async restoreInventoryForRefund(req, res, next) {
    const requestId = `REQ-REFUND-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
    try {
      const { orderId } = req.body;

      if (!orderId) {
        return next(
          new ApiError(400, "Anh y√™u ∆°i, cho em xin orderId v·ªõi nha! ü©∑")
        );
      }

      logger.info(
        `[${requestId}] Nh·∫≠n y√™u c·∫ßu kh√¥i ph·ª•c t·ªìn kho cho ƒë∆°n h√†ng ho√†n ti·ªÅn ${orderId}`
      );
      const result = await productService.restoreInventoryForRefund(
        orderId,
        requestId
      );

      res.status(200).json({
        success: true,
        message: `ƒê√£ kh√¥i ph·ª•c t·ªìn kho th√†nh c√¥ng cho ${result.restoredItems.length} s·∫£n ph·∫©m t·ª´ ƒë∆°n h√†ng ho√†n ti·ªÅn n√® anh y√™u! üéâ`,
        restoredItems: result.restoredItems,
        requestId,
      });
    } catch (error) {
      logger.error(
        `[${requestId}] L·ªói trong restoreInventoryForRefund controller: ${error.message}`
      );
      // Service ƒë√£ x·ª≠ l√Ω v√† throw ApiError, n√™n m√¨nh ch·ªâ c·∫ßn next(error) th√¥i anh y√™u ·∫°
      next(error);
    }
  }

  /**
   * ü©∑ Kh√¥i ph·ª•c t·ªìn kho khi ƒë∆°n h√†ng b·ªã h·ªßy m√† ch∆∞a thanh to√°n
   * Li√™n quan ƒë·∫øn UC-8.4
   * @param {Object} req - Express request object
   * @param {Object} res - Express response object
   * @param {Function} next - Express next middleware function
   */
  async restoreInventoryForCancelledOrder(req, res, next) {
    const requestId = `REQ-CANCEL-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
    try {
      const { orderId } = req.body;

      if (!orderId) {
        return next(
          new ApiError(400, "Anh y√™u ∆°i, cho em xin orderId v·ªõi nha! ü©∑")
        );
      }

      logger.info(
        `[${requestId}] Nh·∫≠n y√™u c·∫ßu kh√¥i ph·ª•c t·ªìn kho cho ƒë∆°n h√†ng b·ªã h·ªßy ${orderId}`
      );
      const result = await productService.restoreInventoryForCancelledOrder(
        orderId,
        requestId
      );

      res.status(200).json({
        success: true,
        message: `ƒê√£ kh√¥i ph·ª•c t·ªìn kho th√†nh c√¥ng cho ${result.restoredItems.length} s·∫£n ph·∫©m t·ª´ ƒë∆°n h√†ng b·ªã h·ªßy n√® anh y√™u! üéâ`,
        restoredItems: result.restoredItems,
        requestId,
      });
    } catch (error) {
      logger.error(
        `[${requestId}] L·ªói trong restoreInventoryForCancelledOrder controller: ${error.message}`
      );
      // Service ƒë√£ x·ª≠ l√Ω v√† throw ApiError, n√™n m√¨nh ch·ªâ c·∫ßn next(error) th√¥i anh y√™u ·∫°
      next(error);
    }
  }
}

module.exports = new ProductController();
