
/**
 * üìÇ V·ªã tr√≠ file: cart-service/src/services/cart.service.js
 * 
 * File n√†y ch·ª©a CartService v·ªõi c√°c ch·ª©c nƒÉng qu·∫£n l√Ω gi·ªè h√†ng si√™u d·ªÖ th∆∞∆°ng cho anh y√™u d·ªÖ th∆∞∆°ng üíñ
 */

const Cart = require('../models/cart.model');
const axios = require('axios');
const logger = require('../../utils/logger'); // ƒê√£ s·ª≠a l·∫°i import logger cho chu·∫©n cute

class CartService {
  /**
   * üõí T√¨m gi·ªè h√†ng ƒëang active theo userId ho·∫∑c sessionId
   * @param {string|null} userId - ID ng∆∞·ªùi d√πng (n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p)
   * @param {string|null} sessionId - ID phi√™n (n·∫øu l√† kh√°ch v√£ng lai)
   * @returns {Promise<Cart|null>} - Gi·ªè h√†ng t√¨m th·∫•y ho·∫∑c null
   */
  async findActiveCart(userId, sessionId) {
    try {
      let cart = null;
      if (userId) {
        cart = await Cart.findOne({ user: userId, status: 'active' });
      } else if (sessionId) {
        cart = await Cart.findOne({ sessionId, status: 'active' });
      }
      return cart;
    } catch (error) {
      logger.error(`Error finding active cart: ${error.message}`);
      throw error;
    }
  }

  /**
   * ü©∑ Ki·ªÉm tra t·ªìn kho s·∫£n ph·∫©m th√¥ng qua Product Service
   * @param {string} productId - ID s·∫£n ph·∫©m
   * @param {number} requestedQuantity - S·ªë l∆∞·ª£ng y√™u c·∫ßu
   * @returns {Promise<{success: boolean, product: object|null, message: string|null}>}
   */
  async checkProductStock(productId, requestedQuantity) {
    try {
      // G·ªçi API ƒë·∫øn Product Service ƒë·ªÉ ki·ªÉm tra t·ªìn kho
      const productServiceUrl = process.env.PRODUCT_SERVICE_URL || 'http://localhost:3002';
      const response = await axios.get(`${productServiceUrl}/api/products/${productId}`);
      if (!response.data.success) {
        return {
          success: false,
          product: null,
          message: 'Product not found'
        };
      }
      const product = response.data.data;
      // Ki·ªÉm tra t·ªìn kho
      if (product.stock < requestedQuantity) {
        return {
          success: false,
          product,
          message: `Not enough stock. Available: ${product.stock}`
        };
      }
      return {
        success: true,
        product,
        message: null
      };
    } catch (error) {
      logger.error(`Error checking product stock: ${error.message}`);
      // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p Product Service kh√¥ng kh·∫£ d·ª•ng
      if (error.response && error.response.status === 404) {
        return {
          success: false,
          product: null,
          message: 'Product not found'
        };
      }
      throw error;
    }
  }

  /**
   * ü©∑ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
   * @param {string|null} userId - ID ng∆∞·ªùi d√πng (n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p)
   * @param {string|null} sessionId - ID phi√™n (n·∫øu l√† kh√°ch v√£ng lai)
   * @param {string} productId - ID s·∫£n ph·∫©m
   * @param {number} quantity - S·ªë l∆∞·ª£ng m·ªõi
   * @returns {Promise<{success: boolean, cart: Cart|null, message: string|null}>}
   */
  async updateCartItem(userId, sessionId, productId, quantity) {
    try {
      // T√¨m gi·ªè h√†ng ƒëang active
      const cart = await this.findActiveCart(userId, sessionId);
      // N·∫øu kh√¥ng t√¨m th·∫•y gi·ªè h√†ng
      if (!cart) {
        return {
          success: false,
          cart: null,
          message: 'Cart not found'
        };
      }
      // T√¨m v·ªã tr√≠ c·ªßa s·∫£n ph·∫©m trong gi·ªè h√†ng
      const existingItemIndex = cart.items.findIndex(
        item => item.product.toString() === productId
      );
      // N·∫øu s·∫£n ph·∫©m kh√¥ng c√≥ trong gi·ªè h√†ng
      if (existingItemIndex === -1) {
        return {
          success: false,
          cart: null,
          message: 'Product not in cart'
        };
      }
      // N·∫øu s·ªë l∆∞·ª£ng = 0, x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
      if (quantity === 0) {
        cart.items.splice(existingItemIndex, 1);
        await cart.save();
        return {
          success: true,
          cart,
          message: 'Product removed from cart'
        };
      }
      // Ki·ªÉm tra t·ªìn kho s·∫£n ph·∫©m
      const stockCheck = await this.checkProductStock(productId, quantity);
      if (!stockCheck.success) {
        return {
          success: false,
          cart: null,
          message: stockCheck.message
        };
      }
      // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
      cart.items[existingItemIndex].quantity = quantity;
      // L∆∞u gi·ªè h√†ng (subtotal s·∫Ω ƒë∆∞·ª£c t√≠nh l·∫°i trong pre-save hook)
      await cart.save();
      return {
        success: true,
        cart,
        message: 'Cart updated successfully'
      };
    } catch (error) {
      logger.error(`Error updating cart item: ${error.message}`);
      throw error;
    }
  }

  /**
   * ü©∑ Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng (gi·ªØ l·∫°i logic c≈©, b·ªï sung ki·ªÉm tra t·ªìn kho b·∫±ng checkProductStock)
   * @param {Object} options - Th√¥ng tin s·∫£n ph·∫©m v√† ng∆∞·ªùi d√πng
   * @param {string} options.userId - ID ng∆∞·ªùi d√πng (n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p)
   * @param {string} options.sessionId - ID phi√™n (n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p)
   * @param {string} options.productId - ID s·∫£n ph·∫©m
   * @param {number} options.quantity - S·ªë l∆∞·ª£ng
   * @returns {Promise<Object>} - Gi·ªè h√†ng ƒë√£ c·∫≠p nh·∫≠t
   */
  async addToCart({ userId, sessionId, productId, quantity }) {
    try {
      // Ki·ªÉm tra th√¥ng tin ƒë·∫ßu v√†o
      if (!productId) {
        throw new Error('Product ID is required');
      }
      if (!quantity || quantity < 1) {
        quantity = 1;
      }
      if (!userId && !sessionId) {
        throw new Error('Either userId or sessionId is required');
      }
      // Ki·ªÉm tra t·ªìn kho b·∫±ng checkProductStock d·ªÖ th∆∞∆°ng
      const stockCheck = await this.checkProductStock(productId, quantity);
      if (!stockCheck.success) {
        throw new Error(stockCheck.message || 'Not enough stock');
      }
      const productInfo = stockCheck.product;
      // T√¨m gi·ªè h√†ng hi·ªán c√≥
      const query = userId
        ? { user: userId, status: 'active' }
        : { sessionId, status: 'active' };
      let cart = await Cart.findOne(query);
      // N·∫øu kh√¥ng c√≥, t·∫°o gi·ªè h√†ng m·ªõi
      if (!cart) {
        cart = new Cart({
          user: userId || null,
          sessionId: userId ? null : sessionId,
          items: [],
          status: 'active'
        });
      }
      // Ki·ªÉm tra s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng ch∆∞a
      const existingItemIndex = cart.items.findIndex(
        item => item.product.toString() === productId
      );
      if (existingItemIndex > -1) {
        // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng n·∫øu s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i
        cart.items[existingItemIndex].quantity += quantity;
      } else {
        // Th√™m s·∫£n ph·∫©m m·ªõi v√†o gi·ªè h√†ng
        cart.items.push({
          product: productId,
          quantity,
          price: productInfo.price,
          name: productInfo.name,
          image: productInfo.thumbnailImage || productInfo.images?.[0]
        });
      }
      // L∆∞u gi·ªè h√†ng
      await cart.save();
      // Tr·∫£ v·ªÅ gi·ªè h√†ng ƒë√£ c·∫≠p nh·∫≠t
      return cart;
    } catch (error) {
      logger.error(`CartService - addToCart error: ${error.message}`);
      throw error;
    }
  }
  /**
   * üíñ H·ª£p nh·∫•t gi·ªè h√†ng c·ªßa kh√°ch v√£ng lai v√†o gi·ªè h√†ng ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p
   * @param {string} userId - ID ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p
   * @param {string} sessionId - ID phi√™n c·ªßa kh√°ch v√£ng lai
   * @returns {Promise<Object>} - K·∫øt qu·∫£ h·ª£p nh·∫•t gi·ªè h√†ng
   */
  async mergeGuestCart(userId, sessionId) {
    try {
      // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ sessionId
      if (!sessionId) {
        return {
          success: false,
          message: 'Session ID l√† b·∫Øt bu·ªôc ƒë·ªÉ h·ª£p nh·∫•t gi·ªè h√†ng nha anh y√™u d·ªÖ th∆∞∆°ng üíñ',
          cart: null
        };
      }

      // T√¨m gi·ªè h√†ng kh√°ch v√£ng lai theo sessionId
      const guestCart = await Cart.findOne({ sessionId, status: 'active' });

      // N·∫øu kh√¥ng t√¨m th·∫•y gi·ªè h√†ng kh√°ch v√£ng lai
      if (!guestCart) {
        // T√¨m ho·∫∑c t·∫°o gi·ªè h√†ng cho ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p
        let userCart = await Cart.findOne({ user: userId, status: 'active' });
        if (!userCart) {
          userCart = new Cart({
            user: userId,
            items: [],
            status: 'active',
            lastActivity: new Date()
          });
          await userCart.save();
        }
        return {
          success: true,
          message: 'Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng kh√°ch v√£ng lai ƒë·ªÉ h·ª£p nh·∫•t, tr·∫£ v·ªÅ gi·ªè h√†ng ng∆∞·ªùi d√πng hi·ªán t·∫°i nha anh y√™u üíñ',
          cart: userCart
        };
      }

      // T√¨m ho·∫∑c t·∫°o gi·ªè h√†ng cho ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p
      let userCart = await Cart.findOne({ user: userId, status: 'active' });

      // N·∫øu ng∆∞·ªùi d√πng ch∆∞a c√≥ gi·ªè h√†ng, g√°n lu√¥n gi·ªè h√†ng kh√°ch v√£ng lai cho user
      if (!userCart) {
        guestCart.user = userId;
        guestCart.sessionId = null;
        guestCart.lastActivity = new Date();
        await guestCart.save();
        return {
          success: true,
          message: 'ƒê√£ g√°n gi·ªè h√†ng kh√°ch v√£ng lai cho ng∆∞·ªùi d√πng d·ªÖ th∆∞∆°ng üíñ',
          cart: guestCart
        };
      }

      // N·∫øu c·∫£ hai gi·ªè h√†ng ƒë·ªÅu t·ªìn t·∫°i, h·ª£p nh·∫•t ch√∫ng l·∫°i
      for (const guestItem of guestCart.items) {
        // T√¨m s·∫£n ph·∫©m t∆∞∆°ng ·ª©ng trong gi·ªè h√†ng ng∆∞·ªùi d√πng
        const existingItemIndex = userCart.items.findIndex(
          item => item.product.toString() === guestItem.product.toString()
        );
        if (existingItemIndex !== -1) {
          // N·∫øu s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i, c·ªông d·ªìn s·ªë l∆∞·ª£ng
          userCart.items[existingItemIndex].quantity += guestItem.quantity;
        } else {
          // N·∫øu s·∫£n ph·∫©m ch∆∞a t·ªìn t·∫°i, th√™m v√†o gi·ªè h√†ng ng∆∞·ªùi d√πng
          userCart.items.push(guestItem);
        }
      }

      // C·∫≠p nh·∫≠t th·ªùi gian ho·∫°t ƒë·ªông
      userCart.lastActivity = new Date();

      // L∆∞u gi·ªè h√†ng ƒë√£ h·ª£p nh·∫•t
      await userCart.save();

      // ƒê√°nh d·∫•u gi·ªè h√†ng kh√°ch v√£ng lai l√† ƒë√£ h·ª£p nh·∫•t
      guestCart.status = 'merged';
      await guestCart.save();

      return {
        success: true,
        message: 'H·ª£p nh·∫•t gi·ªè h√†ng th√†nh c√¥ng cho anh y√™u d·ªÖ th∆∞∆°ng üíñ',
        cart: userCart
      };
    } catch (error) {
      logger.error(`Error merging cart: ${error.message}`);
      throw error;
    }
  }
}

module.exports = new CartService();
